import { createServer } from "http";
import { Server } from "socket.io";
import express from "express";
import dotenv from "dotenv";
dotenv.config();
import cors from "cors";
import morgan from "morgan";
import logger from "./utils/logger.js";
import morganMiddleware from "./middlewares/loggerMiddleware.js";

// import logger from "./config/logger.js";

import connectDB from "./config/db.js";
import authRoutes from "./routes/authRoutes.js";
import userRoutes from "./routes/userRoutes.js";
import challengeRoutes from "./routes/challengeRoutes.js";
import submissionRoutes from "./routes/submissionRoutes.js";
import codeExecutionRoutes from "./routes/codeExecutionRoutes.js";
import leaderboardRoutes from "./routes/leaderboardRoutes.js";
import multiplayerRoutes from "./routes/multiplayerRoutes.js";
import hintRoutes from "./routes/hintRoutes.js";
import powerupRoutes from "./routes/powerupRoutes.js";
import limiter from "./middlewares/rateLimiter.js";
import helmet from "helmet";
import codeRoutes from "./routes/codeRoutes.js";





// Connect to MongoDB
connectDB();


const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*", // Change this to frontend URL in production
    methods: ["GET", "POST"],
  },
});


// const app = express();

// Middlewares
app.use(cors());
app.use(express.json());
app.use(morgan("dev"));
app.use(morganMiddleware); // Morgan HTTP Logger
app.use(morgan("combined", { stream: { write: (msg) => logger.info(msg) } }));
app.use(limiter);
app.use(helmet());
app.use(cors({
  origin: "http://yourfrontend.com", // yaha forntend ki url dalni hai
  methods: ["GET", "POST", "PUT", "DELETE"], 
  credentials: true
}));


// Routes
app.use("/api/auth", authRoutes);
app.use("/api/challenges", challengeRoutes);
app.use("/api/submissions", submissionRoutes);
app.use("/api/users", userRoutes);
app.use("/api/code", codeExecutionRoutes);
app.use("/api/leaderboard", leaderboardRoutes);
app.use("/api/multiplayer", multiplayerRoutes);
app.use("/api/hints", hintRoutes);
app.use("/api/powerups", powerupRoutes);
app.use("/api/code", codeRoutes);





// home  Route
app.get("/", (req, res) => {
  res.send("Code Debugging Platform API is running...");
});

// Global error handling
app.use((err, req, res, next) => {
    logger.error(`Error: ${err.message}`);
    res.status(500).json({ message: "Internal Server Error" });
  });


// Socket.IO Connection
io.on("connection", (socket) => {
    logger.info(`New user connected: ${socket.id}`);
  
    socket.on("joinRoom", ({ roomId, username }) => {
      socket.join(roomId);
      socket.to(roomId).emit("userJoined", { message: `${username} joined the game!` });
      logger.info(`${username} joined room: ${roomId}`);
    });
  
    socket.on("submitSolution", ({ roomId, username, isCorrect }) => {
      if (isCorrect) {
        io.to(roomId).emit("challengeCompleted", { winner: username });
        logger.info(`${username} solved the challenge first in Room: ${roomId}`);
      }
    });
  
    socket.on("disconnect", () => {
      logger.info(`User disconnected: ${socket.id}`);
    });
  });

  

// Start Server
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {  // <-- Ye app.listen ki jagah server.listen karo
  logger.info(`Server running on port ${PORT}`);
});
